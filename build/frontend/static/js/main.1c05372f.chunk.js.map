{"version":3,"sources":["types.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","constants.ts","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","AddOccuHCModal/AddOccuHCForm.tsx","AddOccuHCModal/index.tsx","AddHospitalModal/AddHospitalForm.tsx","AddHospitalModal/index.tsx","PatientDetails/HospitalEntry.tsx","PatientDetails/OccupationalHCEntry.tsx","PatientDetails/HealthCheckEntry.tsx","PatientDetails/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","setPatientList","patientListFromApi","type","payload","addPatient","newPatient","setDiagnosisList","diagnosisListFromApi","addEntry","newEntry","initialState","patients","diagnosis","StateContext","createContext","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","diagnoses","setFieldValue","setFieldTouched","stateOptions","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","icon","maxRating","PatientListPage","dispatch","React","useState","setModalOpen","setError","closeModal","undefined","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","to","a","async","axios","post","console","response","AddEntryForm","description","date","specialist","diagnosisCodes","healthCheckRating","Healthy","AddEntryModal","AddOccuHCForm","employerName","sickLeave","startDate","endDate","AddOccuHCModal","AddHospitalForm","discharge","criteria","AddHospitalModal","HoEntry","entry","margin","Icon","size","OccupationalHCEntry","HCEntry","PatientDetails","useParams","setPatient","entries","setEntries","modalHCOpen","setModalHCOpen","modalOHCOpen","setModalOHCOpen","modalHoOpen","setModalHoOpen","closeHCModal","closeOHCModal","closeHoModal","useEffect","get","patientDetails","getPatientDetails","EntryDetails","Error","JSON","stringify","assertNever","push","length","App","fetchPatientList","fetchDiagnosisList","Link","primary","Divider","hidden","path","render","ReactDOM","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.1c05372f.chunk.js","sourcesContent":["interface BaseEntry {\n\tid: string;\n\tdescription: string;\n\tdate: string;\n\tspecialist: string;\n\tdiagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n\t'Healthy' = 0,\n\t'LowRisk' = 1,\n\t'HighRisk' = 2,\n\t'CriticalRisk' = 3,\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n\ttype: 'HealthCheck';\n\thealthCheckRating: HealthCheckRating;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n\ttype: 'OccupationalHealthcare';\n\temployerName: string;\n\tsickLeave?: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t};\n}\n\nexport interface HospitalEntry extends BaseEntry {\n\ttype: 'Hospital';\n\tdischarge: {\n\t\tdate: string;\n\t\tcriteria: string;\n\t};\n}\n\nexport type Entry =\n\t| HospitalEntry\n\t| OccupationalHealthcareEntry\n\t| HealthCheckEntry;\n\nexport interface Diagnosis {\n\tcode: string;\n\tname: string;\n\tlatin?: string;\n}\n\nexport enum Gender {\n\tMale = 'male',\n\tFemale = 'female',\n\tOther = 'other',\n}\n\nexport interface Patient {\n\tid: string;\n\tname: string;\n\toccupation: string;\n\tgender: Gender;\n\tssn?: string;\n\tdateOfBirth?: string;\n\tentries: Entry[];\n}\n\nexport interface Diagnosis {\n\tcode: string;\n\tname: string;\n\tlatin?: string;\n}\n","import { State } from './state';\nimport { Patient, Diagnosis, Entry } from '../types';\n\nexport const setPatientList = (patientListFromApi: Patient[]): Action => {\n\treturn {\n\t\ttype: 'SET_PATIENT_LIST',\n\t\tpayload: patientListFromApi,\n\t};\n};\n\nexport const addPatient = (newPatient: Patient): Action => {\n\treturn {\n\t\ttype: 'ADD_PATIENT',\n\t\tpayload: newPatient,\n\t};\n};\n\nexport const setDiagnosisList = (diagnosisListFromApi: Diagnosis[]): Action => {\n\treturn {\n\t\ttype: 'SET_DIAGNOSIS_LIST',\n\t\tpayload: diagnosisListFromApi,\n\t};\n};\n\nexport const addEntry = (newEntry: Entry): Action => {\n\treturn {\n\t\ttype: 'ADD_ENTRY',\n\t\tpayload: newEntry,\n\t};\n};\n\nexport type Action =\n\t| {\n\t\t\ttype: 'SET_PATIENT_LIST';\n\t\t\tpayload: Patient[];\n\t  }\n\t| {\n\t\t\ttype: 'ADD_PATIENT';\n\t\t\tpayload: Patient;\n\t  }\n\t| {\n\t\t\ttype: 'SET_DIAGNOSIS_LIST';\n\t\t\tpayload: Diagnosis[];\n\t  }\n\t| {\n\t\t\ttype: 'ADD_ENTRY';\n\t\t\tpayload: Entry;\n\t  };\n\nexport const reducer = (state: State, action: Action): State => {\n\tswitch (action.type) {\n\t\tcase 'SET_PATIENT_LIST':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpatients: {\n\t\t\t\t\t...action.payload.reduce(\n\t\t\t\t\t\t(memo, patient) => ({ ...memo, [patient.id]: patient }),\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t\t...state.patients,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'ADD_PATIENT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpatients: {\n\t\t\t\t\t...state.patients,\n\t\t\t\t\t[action.payload.id]: action.payload,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'SET_DIAGNOSIS_LIST':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdiagnosis: {\n\t\t\t\t\t...action.payload.reduce(\n\t\t\t\t\t\t(memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t\t...state.diagnosis,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'ADD_ENTRY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpatients: {\n\t\t\t\t\t...state.patients,\n\t\t\t\t},\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnosis: { [code: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnosis: {},\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values,\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>\n                <Link to={`/patients/${patient.id}`}>{patient.name}</Link>\n              </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","export const apiBaseUrl = '/api';\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n\tTextField,\n\tNumberField,\n\tDiagnosisSelection,\n} from '../AddPatientModal/FormField';\nimport { HealthCheckEntry, HealthCheckRating } from '../types';\nimport { useStateValue } from '../state';\n\nexport type EntryFormValues = Omit<HealthCheckEntry, 'id'>;\n\ninterface Props {\n\tonSubmit: (values: EntryFormValues) => void;\n\tonCancel: () => void;\n}\n\nexport const AddEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n\tconst [{ diagnosis }] = useStateValue();\n\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\tdescription: '',\n\t\t\t\tdate: '',\n\t\t\t\tspecialist: '',\n\t\t\t\tdiagnosisCodes: [],\n\t\t\t\ttype: 'HealthCheck',\n\t\t\t\thealthCheckRating: HealthCheckRating.Healthy,\n\t\t\t}}\n\t\t\tonSubmit={onSubmit}\n\t\t\tvalidate={(values) => {\n\t\t\t\tconst requiredError = 'Field is required';\n\t\t\t\tconst errors: { [field: string]: string } = {};\n\t\t\t\tif (!values.description) {\n\t\t\t\t\terrors.description = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.date) {\n\t\t\t\t\terrors.date = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.specialist) {\n\t\t\t\t\terrors.specialist = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.type) {\n\t\t\t\t\terrors.type = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.healthCheckRating && values.healthCheckRating !== 0) {\n\t\t\t\t\terrors.healthCheckRating = requiredError;\n\t\t\t\t}\n\t\t\t\treturn errors;\n\t\t\t}}\n\t\t>\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Form className=\"form ui\">\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"date\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Specialist\"\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\n\t\t\t\t\t\t\tname=\"specialist\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Type\"\n\t\t\t\t\t\t\tplaceholder=\"HealthCheck\"\n\t\t\t\t\t\t\tname=\"type\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<DiagnosisSelection\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosis)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Health Check Rating\"\n\t\t\t\t\t\t\tname=\"healthCheckRating\"\n\t\t\t\t\t\t\tcomponent={NumberField}\n\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\tmax={3}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Grid>\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Form>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Formik>\n\t);\n};\n\nexport default AddEntryForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n\tmodalOpen: boolean;\n\tonClose: () => void;\n\tonSubmit: (values: EntryFormValues) => void;\n\terror?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n\t<Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n\t\t<Modal.Header>Add a new entry</Modal.Header>\n\t\t<Modal.Content>\n\t\t\t{error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n\t\t\t<AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n\t\t</Modal.Content>\n\t</Modal>\n);\n\nexport default AddEntryModal;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, DiagnosisSelection } from '../AddPatientModal/FormField';\nimport { OccupationalHealthcareEntry } from '../types';\nimport { useStateValue } from '../state';\n\nexport type OccuFormValues = Omit<OccupationalHealthcareEntry, 'id'>;\n\ninterface Props {\n\tonSubmit: (values: OccuFormValues) => void;\n\tonCancel: () => void;\n}\n\nexport const AddOccuHCForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n\tconst [{ diagnosis }] = useStateValue();\n\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\tdescription: '',\n\t\t\t\tdate: '',\n\t\t\t\tspecialist: '',\n\t\t\t\tdiagnosisCodes: [],\n\t\t\t\ttype: 'OccupationalHealthcare',\n\t\t\t\temployerName: '',\n\t\t\t\tsickLeave: {\n\t\t\t\t\tstartDate: '',\n\t\t\t\t\tendDate: '',\n\t\t\t\t},\n\t\t\t}}\n\t\t\tonSubmit={onSubmit}\n\t\t\tvalidate={(values) => {\n\t\t\t\tconst requiredError = 'Field is required';\n\t\t\t\tconst errors: { [field: string]: string } = {};\n\t\t\t\tif (!values.description) {\n\t\t\t\t\terrors.description = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.date) {\n\t\t\t\t\terrors.date = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.specialist) {\n\t\t\t\t\terrors.specialist = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.type) {\n\t\t\t\t\terrors.type = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.employerName) {\n\t\t\t\t\terrors.employerName = requiredError;\n\t\t\t\t}\n\t\t\t\treturn errors;\n\t\t\t}}\n\t\t>\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Form className=\"form ui\">\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"date\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Specialist\"\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\n\t\t\t\t\t\t\tname=\"specialist\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<DiagnosisSelection\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosis)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Type\"\n\t\t\t\t\t\t\tplaceholder=\"OccupationalHealthcare\"\n\t\t\t\t\t\t\tname=\"type\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Employer Name\"\n\t\t\t\t\t\t\tplaceholder=\"Employer Name\"\n\t\t\t\t\t\t\tname=\"employerName\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Start Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"sickLeave.startDate\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"End Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"sickLeave.endDate\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Grid>\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Form>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Formik>\n\t);\n};\n\nexport default AddOccuHCForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddOccuHCForm, { OccuFormValues } from './AddOccuHCForm';\n\ninterface Props {\n\tmodalOpen: boolean;\n\tonClose: () => void;\n\tonSubmit: (values: OccuFormValues) => void;\n\terror?: string;\n}\n\nconst AddOccuHCModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n\t<Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n\t\t<Modal.Header>Add a new entry</Modal.Header>\n\t\t<Modal.Content>\n\t\t\t{error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n\t\t\t<AddOccuHCForm onSubmit={onSubmit} onCancel={onClose} />\n\t\t</Modal.Content>\n\t</Modal>\n);\n\nexport default AddOccuHCModal;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, DiagnosisSelection } from '../AddPatientModal/FormField';\nimport { HospitalEntry } from '../types';\nimport { useStateValue } from '../state';\n\nexport type HospitalFormValues = Omit<HospitalEntry, 'id'>;\n\ninterface Props {\n\tonSubmit: (values: HospitalFormValues) => void;\n\tonCancel: () => void;\n}\n\nexport const AddHospitalForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n\tconst [{ diagnosis }] = useStateValue();\n\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\tdescription: '',\n\t\t\t\tdate: '',\n\t\t\t\tspecialist: '',\n\t\t\t\tdiagnosisCodes: [],\n\t\t\t\ttype: 'Hospital',\n\t\t\t\tdischarge: {\n\t\t\t\t\tdate: '',\n\t\t\t\t\tcriteria: '',\n\t\t\t\t},\n\t\t\t}}\n\t\t\tonSubmit={onSubmit}\n\t\t\tvalidate={(values) => {\n\t\t\t\tconst requiredError = 'Field is required';\n\t\t\t\tconst errors: { [field: string]: string } = {};\n\t\t\t\tif (!values.description) {\n\t\t\t\t\terrors.description = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.date) {\n\t\t\t\t\terrors.date = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.specialist) {\n\t\t\t\t\terrors.specialist = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.type) {\n\t\t\t\t\terrors.type = requiredError;\n\t\t\t\t}\n\t\t\t\tif (!values.discharge) {\n\t\t\t\t\terrors.employerName = requiredError;\n\t\t\t\t}\n\t\t\t\treturn errors;\n\t\t\t}}\n\t\t>\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Form className=\"form ui\">\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"date\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Specialist\"\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\n\t\t\t\t\t\t\tname=\"specialist\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<DiagnosisSelection\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosis)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Type\"\n\t\t\t\t\t\t\tplaceholder=\"Hospital\"\n\t\t\t\t\t\t\tname=\"type\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Discharge Date\"\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\n\t\t\t\t\t\t\tname=\"discharge.date\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabel=\"Discharge Criteria\"\n\t\t\t\t\t\t\tplaceholder=\"Criteria\"\n\t\t\t\t\t\t\tname=\"discharge.criteria\"\n\t\t\t\t\t\t\tcomponent={TextField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Grid>\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Form>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Formik>\n\t);\n};\n\nexport default AddHospitalForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddHospitalForm, { HospitalFormValues } from './AddHospitalForm';\n\ninterface Props {\n\tmodalOpen: boolean;\n\tonClose: () => void;\n\tonSubmit: (values: HospitalFormValues) => void;\n\terror?: string;\n}\n\nconst AddHospitalModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n\t<Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n\t\t<Modal.Header>Add a new entry</Modal.Header>\n\t\t<Modal.Content>\n\t\t\t{error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n\t\t\t<AddHospitalForm onSubmit={onSubmit} onCancel={onClose} />\n\t\t</Modal.Content>\n\t</Modal>\n);\n\nexport default AddHospitalModal;\n","import React from 'react';\nimport { Icon, Segment } from 'semantic-ui-react';\nimport { HospitalEntry } from '../types';\n\nconst HoEntry: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\n\treturn (\n\t\t<div>\n\t\t\t<Segment style={{ margin: '10px 0' }}>\n\t\t\t\t<h4>\n\t\t\t\t\t{entry.date} <Icon name=\"hospital\" size=\"large\" />\n\t\t\t\t</h4>\n\t\t\t\t<p style={{ color: 'grey' }}>\n\t\t\t\t\t<i>{entry.description}</i>\n\t\t\t\t</p>\n\t\t\t\t<div style={{ color: 'grey' }}>Specialist: {entry.specialist}</div>\n\t\t\t\t{entry.diagnosisCodes && (\n\t\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\t\tDiagnoses:{' '}\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{entry.diagnosisCodes.map((code) => (\n\t\t\t\t\t\t\t\t<li key={code}>{code}</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\tDischarge date: {entry.discharge.date}\n\t\t\t\t</div>\n\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\tDischarge criteria: {entry.discharge.criteria}\n\t\t\t\t</div>\n\t\t\t</Segment>\n\t\t</div>\n\t);\n};\n\nexport default HoEntry;\n","import React from 'react';\nimport { Icon, Segment } from 'semantic-ui-react';\nimport { OccupationalHealthcareEntry } from '../types';\n\nconst OccupationalHCEntry: React.FC<{ entry: OccupationalHealthcareEntry }> = ({\n\tentry,\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t<Segment style={{ margin: '10px 0' }}>\n\t\t\t\t<h4>\n\t\t\t\t\t{entry.date} <Icon name=\"stethoscope\" size=\"large\" />{' '}\n\t\t\t\t\t{entry.employerName}\n\t\t\t\t</h4>\n\t\t\t\t<p style={{ color: 'grey' }}>\n\t\t\t\t\t<i>{entry.description}</i>\n\t\t\t\t</p>\n\t\t\t\t<div style={{ color: 'grey' }}>Specialist: {entry.specialist}</div>\n\t\t\t\t{entry.diagnosisCodes && (\n\t\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\t\tDiagnoses:{' '}\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{entry.diagnosisCodes.map((code) => (\n\t\t\t\t\t\t\t\t<li key={code}>{code}</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{entry.sickLeave && (\n\t\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\t\tSick leave: {entry.sickLeave.startDate} - {entry.sickLeave.endDate}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Segment>\n\t\t</div>\n\t);\n};\n\nexport default OccupationalHCEntry;\n","import React from 'react';\nimport { Icon, Segment } from 'semantic-ui-react';\nimport { HealthCheckEntry } from '../types';\n\nconst HCEntry: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\n\tconst Rating: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\n\t\tswitch (entry.healthCheckRating) {\n\t\t\tcase 0:\n\t\t\t\treturn <Icon color=\"green\" name=\"heart\" />;\n\t\t\tcase 1:\n\t\t\t\treturn <Icon color=\"yellow\" name=\"heart\" />;\n\t\t\tcase 2:\n\t\t\t\treturn <Icon color=\"orange\" name=\"heart\" />;\n\t\t\tcase 3:\n\t\t\t\treturn <Icon color=\"red\" name=\"heart\" />;\n\t\t\tdefault:\n\t\t\t\treturn <div></div>;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Segment style={{ margin: '10px 0' }}>\n\t\t\t\t<h4>\n\t\t\t\t\t{entry.date} <Icon name=\"doctor\" size=\"large\" />\n\t\t\t\t</h4>\n\t\t\t\t<p style={{ color: 'grey' }}>\n\t\t\t\t\t<i>{entry.description}</i>\n\t\t\t\t</p>\n\t\t\t\t<div style={{ color: 'grey' }}>Specialist: {entry.specialist}</div>\n\t\t\t\t{entry.diagnosisCodes && (\n\t\t\t\t\t<div style={{ color: 'grey' }}>\n\t\t\t\t\t\tDiagnoses:{' '}\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{entry.diagnosisCodes.map((code) => (\n\t\t\t\t\t\t\t\t<li key={code}>{code}</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Rating entry={entry} />\n\t\t\t</Segment>\n\t\t</div>\n\t);\n};\n\nexport default HCEntry;\n","import React from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { Icon, Button } from 'semantic-ui-react';\n\nimport { EntryFormValues } from '../AddEntryModal/AddEntryForm';\nimport AddEntryModal from '../AddEntryModal';\nimport { OccuFormValues } from '../AddOccuHCModal/AddOccuHCForm';\nimport AddOccuHCModal from '../AddOccuHCModal';\nimport { HospitalFormValues } from '../AddHospitalModal/AddHospitalForm';\nimport AddHospitalModal from '../AddHospitalModal';\nimport { useStateValue, addEntry } from '../state';\n\nimport {\n\tPatient,\n\tEntry,\n\tHealthCheckEntry,\n\tOccupationalHealthcareEntry,\n\tHospitalEntry,\n} from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HoEntry from './HospitalEntry';\nimport OccupationalHCEntry from './OccupationalHCEntry';\nimport HCEntry from './HealthCheckEntry';\n\nconst PatientDetails: React.FC = () => {\n\tconst { id } = useParams<{ id: string }>();\n\tconst [, dispatch] = useStateValue();\n\n\tconst [error, setError] = React.useState<string | undefined>();\n\tconst [patient, setPatient] = React.useState<Patient | undefined>();\n\tconst [entries, setEntries] = React.useState<Entry[]>();\n\n\tconst [modalHCOpen, setModalHCOpen] = React.useState<boolean>(false);\n\tconst [modalOHCOpen, setModalOHCOpen] = React.useState<boolean>(false);\n\tconst [modalHoOpen, setModalHoOpen] = React.useState<boolean>(false);\n\n\tconst openHCModal = (): void => setModalHCOpen(true);\n\tconst closeHCModal = (): void => {\n\t\tsetModalHCOpen(false);\n\t\tsetError(undefined);\n\t};\n\n\tconst openOHCModal = (): void => setModalOHCOpen(true);\n\tconst closeOHCModal = (): void => {\n\t\tsetModalOHCOpen(false);\n\t\tsetError(undefined);\n\t};\n\n\tconst openHoModal = (): void => setModalHoOpen(true);\n\tconst closeHoModal = (): void => {\n\t\tsetModalHoOpen(false);\n\t\tsetError(undefined);\n\t};\n\n\tReact.useEffect(() => {\n\t\tconst getPatientDetails = async () => {\n\t\t\ttry {\n\t\t\t\tconst patientDetails = await axios.get<Patient>(\n\t\t\t\t\t`${apiBaseUrl}/patients/${id}`\n\t\t\t\t);\n\t\t\t\tsetPatient(patientDetails.data);\n\t\t\t\tsetEntries(patientDetails.data.entries);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e.response.data);\n\t\t\t\tsetError(e.response.data);\n\t\t\t}\n\t\t};\n\t\tgetPatientDetails();\n\t}, [id]);\n\n\tconst submitNewEntry = async (values: EntryFormValues) => {\n\t\ttry {\n\t\t\tconst { data: newEntry } = await axios.post<HealthCheckEntry>(\n\t\t\t\t`${apiBaseUrl}/patients/${id}/entries`,\n\t\t\t\tvalues\n\t\t\t);\n\t\t\tdispatch(addEntry(newEntry));\n\t\t\tif (entries) {\n\t\t\t\tentries.push(newEntry);\n\t\t\t\tsetEntries(entries);\n\t\t\t}\n\t\t\tcloseHCModal();\n\t\t} catch (e) {\n\t\t\tconsole.error(e.response.data);\n\t\t\tsetError(e.response.data.error);\n\t\t}\n\t};\n\n\tconst submitNewOccu = async (values: OccuFormValues) => {\n\t\ttry {\n\t\t\tconst { data: newEntry } = await axios.post<OccupationalHealthcareEntry>(\n\t\t\t\t`${apiBaseUrl}/patients/${id}/entries`,\n\t\t\t\tvalues\n\t\t\t);\n\t\t\tdispatch(addEntry(newEntry));\n\t\t\tif (entries) {\n\t\t\t\tentries.push(newEntry);\n\t\t\t\tsetEntries(entries);\n\t\t\t}\n\t\t\tcloseOHCModal();\n\t\t} catch (e) {\n\t\t\tconsole.error(e.response.data);\n\t\t\tsetError(e.response.data.error);\n\t\t}\n\t};\n\n\tconst submitNewHospital = async (values: HospitalFormValues) => {\n\t\ttry {\n\t\t\tconst { data: newEntry } = await axios.post<HospitalEntry>(\n\t\t\t\t`${apiBaseUrl}/patients/${id}/entries`,\n\t\t\t\tvalues\n\t\t\t);\n\t\t\tdispatch(addEntry(newEntry));\n\t\t\tif (entries) {\n\t\t\t\tentries.push(newEntry);\n\t\t\t\tsetEntries(entries);\n\t\t\t}\n\t\t\tcloseHoModal();\n\t\t} catch (e) {\n\t\t\tconsole.error(e.response.data);\n\t\t\tsetError(e.response.data.error);\n\t\t}\n\t};\n\n\tconst assertNever = (value: never): never => {\n\t\tthrow new Error(\n\t\t\t`Unhandled discriminated union member: ${JSON.stringify(value)}`\n\t\t);\n\t};\n\n\tconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n\t\tswitch (entry.type) {\n\t\t\tcase 'Hospital':\n\t\t\t\treturn <HoEntry key={entry.id} entry={entry} />;\n\t\t\tcase 'OccupationalHealthcare':\n\t\t\t\treturn <OccupationalHCEntry key={entry.id} entry={entry} />;\n\t\t\tcase 'HealthCheck':\n\t\t\t\treturn <HCEntry key={entry.id} entry={entry} />;\n\t\t\tdefault:\n\t\t\t\treturn assertNever(entry);\n\t\t}\n\t};\n\n\tif (patient) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>\n\t\t\t\t\t{patient.name}\n\t\t\t\t\t{patient.gender === 'male' ? (\n\t\t\t\t\t\t<Icon name=\"man\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Icon name=\"woman\" />\n\t\t\t\t\t)}\n\t\t\t\t</h2>\n\t\t\t\t<p>\n\t\t\t\t\tSSN: {patient.ssn}\n\t\t\t\t\t<br />\n\t\t\t\t\tOccupation: {patient.occupation}\n\t\t\t\t</p>\n\t\t\t\t<AddEntryModal\n\t\t\t\t\tmodalOpen={modalHCOpen}\n\t\t\t\t\tonSubmit={submitNewEntry}\n\t\t\t\t\terror={error}\n\t\t\t\t\tonClose={closeHCModal}\n\t\t\t\t/>\n\t\t\t\t<Button onClick={() => openHCModal()}>New Health Check Entry</Button>\n\t\t\t\t<AddOccuHCModal\n\t\t\t\t\tmodalOpen={modalOHCOpen}\n\t\t\t\t\tonSubmit={submitNewOccu}\n\t\t\t\t\terror={error}\n\t\t\t\t\tonClose={closeOHCModal}\n\t\t\t\t/>\n\t\t\t\t<Button onClick={() => openOHCModal()}>\n\t\t\t\t\tNew OccupationalHealthcare Entry\n\t\t\t\t</Button>\n\t\t\t\t<AddHospitalModal\n\t\t\t\t\tmodalOpen={modalHoOpen}\n\t\t\t\t\tonSubmit={submitNewHospital}\n\t\t\t\t\terror={error}\n\t\t\t\t\tonClose={closeHoModal}\n\t\t\t\t/>\n\t\t\t\t<Button onClick={() => openHoModal()}>New Hospital Entry</Button>\n\t\t\t\t<h3>Entries</h3>\n\t\t\t\t{patient.entries.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{patient.entries.map((entry) => EntryDetails({ entry: entry }))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <div>{error}</div>;\n\t}\n};\n\nexport default PatientDetails;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { useStateValue, setPatientList, setDiagnosisList } from './state';\nimport { Patient, Diagnosis } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetails from './PatientDetails';\n\nconst App: React.FC = () => {\n\tconst [, dispatch] = useStateValue();\n\tReact.useEffect(() => {\n\t\t// axios.get<void>(`${apiBaseUrl}/ping`);\n\n\t\tconst fetchPatientList = async () => {\n\t\t\ttry {\n\t\t\t\tconst { data: patientListFromApi } = await axios.get<Patient[]>(\n\t\t\t\t\t`${apiBaseUrl}/patients`\n\t\t\t\t);\n\t\t\t\tdispatch(setPatientList(patientListFromApi));\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t};\n\t\tfetchPatientList();\n\n\t\tconst fetchDiagnosisList = async () => {\n\t\t\ttry {\n\t\t\t\tconst { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n\t\t\t\t\t`${apiBaseUrl}/diagnosis`\n\t\t\t\t);\n\t\t\t\tdispatch(setDiagnosisList(diagnosisListFromApi));\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t};\n\t\tfetchDiagnosisList();\n\t}, [dispatch]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<Container>\n\t\t\t\t\t<Header as=\"h1\">Patientor</Header>\n\t\t\t\t\t<Button as={Link} to=\"/\" primary>\n\t\t\t\t\t\tHome\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Divider hidden />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/patients/:id\"\n\t\t\t\t\t\t\trender={() => <PatientDetails />}\n\t\t\t\t\t\t></Route>\n\t\t\t\t\t\t<Route path=\"/\" render={() => <PatientListPage />} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Container>\n\t\t\t</Router>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}